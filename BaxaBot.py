import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, executor, types
from vars import *


logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
intro = '–ó–¥–∞—Ä–æ–≤–∞, –ß–µ —Ö–æ—Ç–µ–ª?'

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer(intro, reply_markup=mainmenu)

@dp.message_handler(text = 'üó£–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ')
async def menuCategories(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∑—É', reply_markup=restoMenu)
@dp.message_handler(text = '‚òé–°–≤—è–∑—å —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º')
async def cat1Menu(message: types.Message):
    await message.answer('–î—è–¥—è –ë–∞—Ö–∞, —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç')



@dp.message_handler(text = '–ü—Ä–∏–≤–µ—Ç')
async def cat1Menu(message: types.Message):
    await message.answer('–ó–¥–∞—Ä–æ–≤–∞, –ü—É–ø—Å–∏–∫')
@dp.message_handler(text = '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
async def cat1Menu(message: types.Message):
    await message.answer('–ï—Å–ª–∏ —á–µ, —è –ë–∞—Ö–∞')
@dp.message_handler(text = '–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç')
async def cat1Menu(message: types.Message):
    await message.answer('–ö—É–ø–∏–ª —É –∞—Ä–∞–±–∞ —á–∞—Å—ã, –∞ –æ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –∏–¥—É—Ç')
@dp.message_handler(text = '–£ —Ç–µ–±—è –µ—Å—Ç—å –ø–∞—Ä–∞?')
async def cat1Menu(message: types.Message):
    await message.answer('–ü—É–ø—Å–∏–∫, –Ω–µ–Ω–∞–¥–æ —Å–ø–µ—à–∏—Ç—å')
@dp.message_handler(text = '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
async def cat1Menu(message: types.Message):
    await message.answer('–£ –∏–¥–µ–∞–ª–∞, –Ω–µ—Ç —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏')
@dp.message_handler(text = '‚Ü©–ö –Ω–∞—á–∞–ª—É')
async def cat1Menu(message: types.Message):
    await message.answer(intro, reply_markup = mainmenu)



# @dp.message_handler(text= '')
# async def order




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)